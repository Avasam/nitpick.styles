[nitpick.meta]
name = "Python"

# https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file
["pyproject.toml".tool.black]
line-length = 120

# https://github.com/hhatto/autopep8#usage
# https://github.com/hhatto/autopep8#more-advanced-usage
["pyproject.toml".tool.autopep8]
max_line_length = 120
recursive = true
aggressive = 3

# https://github.com/microsoft/pyright/blob/main/docs/configuration.md#sample-pyprojecttoml-file
["pyproject.toml".tool.pyright]
typeCheckingMode = "strict"
# Extra strict
reportImplicitStringConcatenation="error"
reportCallInDefaultInitializer="error"
reportMissingSuperCall="none" # False positives on base classes
reportPropertyTypeMismatch="error"
reportUninitializedInstanceVariable="error"
reportUnnecessaryTypeIgnoreComment="error"
reportUnusedCallResult="none"
exclude = [
  # We expect stub files to be incomplete or contain useless statements
  "typings/",
]
# Type stubs may not be completable
reportMissingTypeStubs = "warning"
# False positives with TYPE_CHECKING
reportImportCycles = "information"
# Extra runtime safety
reportUnnecessaryComparison = "warning"
# Flake8 does a better job
reportUnusedImport = "none"
# numpy has way too many complex types that triggers this
reportUnknownMemberType = "none"

# https://github.com/PyCQA/pylint/blob/main/examples/pylintrc
# https://pylint.pycqa.org/en/latest/technical_reference/features.html
["pyproject.toml".tool.pylint.REPORTS]
# Just like default but any error, warning or convention will make drop to 9 or less. refactor are worth more
evaluation = "10.0 - error - warning - convention - ((10 * refactor) / statement) * 10"
["pyproject.toml".tool.pylint.MASTER]
fail-under = 9.0
# https://pylint.pycqa.org/en/latest/technical_reference/extensions.html
load-plugins = [
  "pylint.extensions.emptystring",
  "pylint.extensions.confusing_elif",
  "pylint.extensions.consider_ternary_expression",
  "pylint.extensions.bad_builtin",
  "pylint.extensions.mccabe",
  "pylint.extensions.check_elif",
  "pylint.extensions.redefined_variable_type",
  "pylint.extensions.overlapping_exceptions",
  "pylint.extensions.empty_comment",
  "pylint.extensions.set_membership",
  "pylint.extensions.typing",
  # TODO: Maybe later
  # "pylint.extensions.docparams",
  # Not wanted/needed
  # "pylint.extensions.broad_try_clause",
  # "pylint.extensions.code_style",
  # "pylint.extensions.comparetozero",
  # "pylint.extensions.docstyle",
  # "pylint.extensions.while_used",
  # Didn't work
  # "pylint.extensions.comparison_placement",
  # "pylint.extensions.for_any_all",
]
ignore-paths = [
  # We expect stub files to be incomplete or contain useless statements
  "^.*.pyi$",
]
extension-pkg-allow-list = ["PyQt6", "PySide6", "win32ui"]
# Dynamic/Generated members from SQLAlchemy
ignored-classes = ["scoped_session"]

["pyproject.toml".tool.pylint.FORMAT]
max-line-length = 120

["pyproject.toml".tool.pylint.DESIGN]
# Same as SonarLint
max-args = 7
# Arbitrary to 2 bytes
max-attributes = 15
max-locals = 15

["pyproject.toml".tool.pylint.'MESSAGES CONTROL']
# Same as SonarLint
max-complexity = 15
# At least same as max-complexity
max-branches = 15

# https://pylint.pycqa.org/en/latest/user_guide/options.html#naming-styles
module-naming-style = "any"
# Can't make private class with PascalCase
class-rgx = "_?_?[a-zA-Z]+?$"
good-names = [
  # PyQt methods
  "closeEvent", "paintEvent", "keyPressEvent", "mousePressEvent", "mouseMoveEvent", "mouseReleaseEvent",
  # https://github.com/PyCQA/pylint/issues/2018
  "id", "x", "y", "a0", "i", "t0", "t1",
]
disable = [
  # No need to mention the fixmes
  "fixme",
  # Already taken care of and grayed out. Also conflicts with Pyright reportIncompatibleMethodOverride
  "unused-argument",
  # Already taken care of by Flake8 and isort
  "ungrouped-imports",
  "unused-import",
  "wrong-import-order",
  "wrong-import-position",
  # Doesn't work with local imports
  "import-error",
  # Similar lines in 2 files, doesn't really work
  "R0801",
]

["pyproject.toml".tool.pylint.TYPECHECK]
generated-members = [
  # https://github.com/PyCQA/pylint/issues/4987
  "cv2",
  # https://github.com/mhammond/pywin32/issues/1913
  "pywintypes.error",
]

["pyproject.toml".tool.isort]
line_length = 120
combine_as_imports = true

# [nitpick.files.".flake8"]
# comma_separated_values = ["flake8.ignore", "flake8.per-file-ignores", "flake8.ignore-names"]

[".flake8".flake8]
color = "always"
max-line-length = 120
# Linebreak before binary operator
# Allow imports at the bottom of file
# ignore =  "W503,E402"
# Quotes
# Allow ... on same line as def
# Line too long
# Naming conventions can't be controlled for external libraries
# per-file-ignores = "typings/**: Q000,E704,E501,N8"
# PyQt methods
ignore-names = "closeEvent,paintEvent,keyPressEvent,mousePressEvent,mouseMoveEvent,mouseReleaseEvent"
# McCabe max-complexity is also taken care of by Pylint and doesn't fail the build there
# So this is the hard limit
max-complexity = 32
inline-quotes = "double"

[".editorconfig"."*.py"]
indent_size = 4

[".vscode/extensions.json".contains_json]
# Keep in alphabetical order
recommendations = """
  [
    "bungcip.better-toml",
    "ms-python.python",
    "ms-python.vscode-pylance",
    "pkief.material-icon-theme",
    "shardulm94.trailing-spaces",  
  ]
"""
unwantedRecommendations = """
  [
    # VSCode has implemented an optimized version
    "coenraads.bracket-pair-colorizer",
    "coenraads.bracket-pair-colorizer-2",
    # Lots of conflicts
    "esbenp.prettier-vscode",
    # Replaced by ESLint
    "eg2.tslint",
    "ms-vscode.vscode-typescript-tslint-plugin",
    # Obsoleted by Pylance
    "ms-pyright.pyright",
    # Not configurable per workspace, tends to conflict with other linters
    # Use eslint-plugin-sonarjs for JS/TS projects
    "sonarsource.sonarlint-vscode",
  ]
"""
